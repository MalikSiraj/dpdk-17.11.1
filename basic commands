#kernel version check
uname -r

# check kernel verion and operating system 32 or 64
uname -a

# creating huge pages on none NUMA architecture
echo 1024 > /sys/kernel/mm/hugepages/hugepages-2048kB/nr_hugepages

# On a NUMA machine, pages should be allocated explicitly on separate nodes:
echo 1024 > /sys/devices/system/node/node0/hugepages/hugepages-2048kB/nr_hugepages
echo 1024 > /sys/devices/system/node/node1/hugepages/hugepages-2048kB/nr_hugepages

# Once the hugepage memory is reserved, to make the memory available for DPDK use, perform the following steps:
mkdir /mnt/huge
mount -t hugetlbfs nodev /mnt/huge

# Uncompress
tar xJf dpdk-17.11.1.tar.xz

#The format of a DPDK target is:
#ARCH-MACHINE-EXECENV-TOOLCHAIN
#where:

    #ARCH can be: i686, x86_64, ppc_64, arm64
    #MACHINE can be: native, power8, armv8a
    #EXECENV can be: linuxapp, bsdapp
    #TOOLCHAIN can be: gcc, icc

# Prepare a target
make config T=x86_64-native-linuxapp-gcc
make install T=x86_64-native-linuxapp-gcc

#A small kernel module to set up the device, map device memory to user-space and register interrupts. 
#In many cases, the standard uio_pci_generic module included in the Linux kernel can provide the uio capability. 
#This module can be loaded using the command:

#sudo modprobe uio_pci_generic

#As an alternative to the uio_pci_generic, the DPDK also includes the igb_uio module which can be found in the kmod subdirectory 
#referred to above. It can be loaded as shown below:

sudo modprobe uio
sudo insmod build/kmod/igb_uio.ko

# checking the status of network drivers binding 
./usertools/dpdk-devbind.py --status

#To bind device eth1,``04:00.1``, to the uio_pci_generic driver:
./usertools/dpdk-devbind.py --bind=uio_pci_generic 04:00.1

#To bind device eth1,``04:00.0``, to the igb_uio:
./usertools/dpdk-devbind.py --bind=igb_uio 04:00.0
./usertools/dpdk-devbind.py --bind=igb_uio 04:00.1
./usertools/dpdk-devbind.py --bind=igb_uio 05:00.0
./usertools/dpdk-devbind.py --bind=igb_uio 05:00.1

#or, alternatively,

./usertools/dpdk-devbind.py --bind=uio_pci_generic eth1

#To restore device 82:00.0 to its original kernel binding:

./usertools/dpdk-devbind.py --bind=ixgbe 82:00.0
# before compiling the application set few parameters

export RTE_SDK=$HOME/dpdk-stable-17.11.1
export RTE_TARGET=x86_64-native-linuxapp-gcc

#Check the total Huge pages
grep Hugepagesize /proc/meminfo

# check the free Huge pages
grep HugePages_Free /proc/meminfo

# Runing l2fwd
./build/l2fwd -l 0-3 -n 4 -- -q 8 -p 0003

# runing l3fwd
./build/l3fwd -l 1 -n 4 -- -p 0x3 --config="(0,0,1)" --parse-ptype



